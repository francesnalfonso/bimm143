---
title: "Class 13 Lab"
author: "Nicole Alfonso, (PID: A16429176)"
format: pdf
editor: visual
---

## Transcriptomics and the Analysis of RNA-seq Data

## 1. Background

The data for this hands-on session comes from a published RNA-seq experiment where airway smooth muscle cells were treated with [dexamethasone](https://en.wikipedia.org/wiki/Dexamethasone), a synthetic glucocorticoid steroid with anti-inflammatory effects ([Himes et al. 2014](http://www.ncbi.nlm.nih.gov/pubmed/24926665)). Himes et al. used RNA-seq to profile gene expression changes in four different ASM cell lines treated with dexamethasone glucocorticoid.

## 2. Bioconductor setup 

For this lab, I installed the core Bioconductor packages – BiocManager and DESeq2 – in my R console.

## 3. Import countData and colData

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names = 1)
metadata <- read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

> Q1. How many genes are in this data set?
>
> 38694

```{r}
nrow(counts)
```

> Q2. How many 'control' cell lines do we have?
>
> 4

```{r}
View(metadata)
```

## 4. Toy differential gene expression 

Look at the metadata object again to see which samples are `control` and which are drug `treated`. Note that the control samples are SRR1039508, SRR1039512, SRR1039516, and SRR1039520. This bit of code will first find the sample `id` for those labeled control. Then calculate the mean counts per gene across these samples:

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

An alternative way to do this same thing using the `dplyr` package from the tidyverse is shown below.

```{r}
library(dplyr)
control <- metadata %>% filter(dex=="control")
control.counts <- counts %>% select(control$id) 
control.mean <- rowSums(control.counts)/4
head(control.mean)
```

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here?

```{r}
#For this function, the inputs are the colData and countsData sets. In the case that more samples are added, the function uses ncol() to calculate the number of samples in the control group. This is different from the original code used, as just used 4, since the number of control samples was already known. 

calc_control_mean <- function(colDataset, countsDataset) {
  control <- colDataset[colDataset[, "dex"] =="control", ]
  controlvar.counts <- countsDataset[, control$id]
  control.mean <- rowSums(control.counts) / ncol(control.counts)
  return(control.mean)
}

#Testing out the function 
head(calc_control_mean(metadata, counts))
```

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

```{r}

calc_treated_mean <- function(colDataset, countsDataset) {
  treated <- colDataset[colDataset[, "dex"] =="treated", ]
  treated.counts <- countsDataset[, treated$id]
  treated.mean <- rowSums(treated.counts) / ncol(treated.counts)
  return(treated.mean)
}

head(calc_treated_mean(metadata, counts))
```

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.mean <- rowSums( counts[ ,treated$id] )/4
head(treated.mean)
```

We will combine our meancount data for bookkeeping purposes. I will then use colSums() to show the sum of the mean counts across all genes for each group.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
colSums(meancounts)
```

> Q5(a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")
```

> Q5(b). You could also use the ggplot2 package to make this figure producing the plot below. What geom\_?() function would you use for this plot?

```{r}
library(ggplot2)
ggplot(data = meancounts, aes(x = meancounts[, 1], y = meancounts[, 2])) +
  geom_point() +
  labs(x = "Control", y = "Treated")
```

> Q6. . Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

```{r}
plot(meancounts[, 1], meancounts[, 2], xlab = "log Control", ylab = "log Treated", log = "xy")
```

```{r}
ggplot(data = meancounts, aes(x = meancounts[, 1], y = meancounts[, 2])) +
  geom_point() +
  labs(x = "log Control", y = "log Treated") +
  scale_x_continuous(trans = "log2") +  
  scale_y_continuous(trans = "log2")  
```

```{r}
ggplot(data = meancounts, aes(x = meancounts[, 1], y = meancounts[, 2])) +
  geom_point() +
  labs(x = "log Control", y = "log Treated") +
  scale_x_log10() +  
  scale_y_log10()
```

We can find candidate differentially expressed genes by looking for genes with a large change between control and dex-treated samples. We usually look at the log2 of the fold change, because this has better mathematical properties. Here we calculate log2foldchange, add it to our meancounts data.frame and inspect the results either with the head() or the View() function for example.

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?
>
> The arr.ind=TRUE argument will clause which() to return both the row and column indices (i.e. positions) where there are TRUE values. In this case this will tell us which genes (rows) and samples (columns) have zero counts. We are going to ignore any genes that have zero counts in any sample so we just focus on the row answer. Calling unique() will ensure we don’t count any row twice if it has zero entries in
> both samples

A common threshold used for calling something differentially expressed is a log2(FoldChange) of greater than 2 or less than -2. Let’s filter the data set both ways to see how many genes are up or down-regulated.

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level?
>
> 250

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level?
>
> 367

```{r}
sum(up.ind)
sum(down.ind)
```

## 5. Setting up for DESeq

```{r}
library(DESeq2)
citation("DESeq2")
```

Importing data

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts,
colData=metadata,
design=~dex)
dds
```

## 6. Principal Component Analysis 

Before running DESeq analysis we can look how the count data samples are related to one another via our old friend Principal Component Analysis (PCA). We will follow the DESeq recommended procedure and associated functions for PCA. First calling vst() to apply a variance stabilizing transformation and then plotPCA() to calculate our PCs and plot the results.

```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))
```

The plotPCA() function comes with DESeq2 and intgroup are our dex groups for labeling the samples; they tell the function to use them to choose colors.

```{r}
pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)
```

We can also build the PCA plot from scratch using the ggplot2 package. This is done by asking the plotPCA function to return the data used for plotting rather than building the plot.

```{r}
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData) +
aes(x = PC1, y = PC2, color = dex) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed() +
theme_bw()
```

## 7. DESeq analysis 

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
res
```

We can summarize some basic tallies using the summary function

```{r}
summary(res)
```

The results function contains a number of arguments to customize the results table. By default the argument alpha is set to 0.1. If the adjusted p value cutoff will be a value other than 0.1, alpha should be set to that value:

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

## 8. Adding annotation data 

We will use one of Bioconductor’s main annotation packages to help with mapping between various ID schemes. Here we load the AnnotationDbi package and the annotation data package for humans org.Hs.eg.db.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

The later of these is is the organism annotation package (“org”) for Homo sapiens (“Hs”), organized as an AnnotationDbi database package (“db”), using Entrez Gene IDs (“eg”) as primary key. To get a list of all available key types that we can use to map between, use the columns() function:

```{r}
columns(org.Hs.eg.db)
```

The main function we will use from the AnnotationDbi package is called mapIds(). We can use the mapIds() function to add individual columns to our results table. We provide the row names of our results table as a key, and specify that keytype=ENSEMBL. The column argument tells the mapIds() function which information we want, and the multiVals argument tells the function what to do if there are multiple possible values for a single input value. Here we ask to just give us back the first one that occurs in the database.

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
keys=row.names(res), # Our genenames
keytype="ENSEMBL", # The format of our genenames
column="SYMBOL", # The new format we want to add
multiVals="first")
head(res)
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res\$entrez, res\$uniprot and res\$genename

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
keys=row.names(res),
column="ENTREZID",
keytype="ENSEMBL",
multiVals="first")

res$uniprot <- mapIds(org.Hs.eg.db,
keys=row.names(res),
column="UNIPROT",
keytype="ENSEMBL",
multiVals="first")

res$genename <- mapIds(org.Hs.eg.db,
keys=row.names(res),
column="GENENAME",
keytype="ENSEMBL",
multiVals="first")

head(res)
```

You can arrange and view the results by the adjusted p-value

```{r}
ord <- order( res$padj )
#View(res[ord,])
head(res[ord,])
```

Finally, let’s write out the ordered significant results with annotations

```{r}
write.csv(res[ord,], "deseq_results.csv")
```

## 9. Data Visualization 

### Volcano plots 

Let’s make a commonly produced visualization from this data, namely a so-called Volcano plot. These summary figures are frequently used to highlight the proportion of genes that are both significantly regulated and display a high fold change. Typically these plots shows the log fold change on the X-axis, and the −𝑙𝑜𝑔10 of the p-value on the Y-axis (the more significant the p-value, the larger the −𝑙𝑜𝑔10 of that value will be). A very dull (i.e. non colored and labeled) version can be created with a quick call to plot() like
so:

```{r}
plot( res$log2FoldChange, -log(res$padj),
xlab="Log2(FoldChange)",
ylab="-Log(P-value)")
```

To make this more useful we can add some guidelines (with the abline() function) and color (with a custom color vector) highlighting genes that have padj\<0.05 and the absolute log2FoldChange\>2.

```{r}
plot( res$log2FoldChange, -log(res$padj),
ylab="-Log(P-value)", xlab="Log2(FoldChange)")
# Add some cut-off lines
abline(v=c(-2,2), col="darkgray", lty=2)
abline(h=-log(0.05), col="darkgray", lty=2)
```

To color the points we will setup a custom color vector indicating transcripts with large fold change and significant differences between conditions:

```{r}
# Setup our custom point color vector
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"
# Volcano plot with custom colors
plot( res$log2FoldChange, -log(res$padj),
col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )
# Cut-off lines
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

```{r}
library(EnhancedVolcano)

x <- as.data.frame(res)

EnhancedVolcano(x,
    lab = x$symbol,
    x = 'log2FoldChange',
    y = 'pvalue')
```
